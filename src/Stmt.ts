/* Generated By generateAST.cjs */

import { Expr, Variable } from "./Expr";
import { Token } from "./Token";

export interface Visitor<T> {
  visitBlockStmt(expr: Block): T; 
  visitClassStmt(expr: Class): T; 
  visitExpressionStmt(expr: Expression): T; 
  visitFunctionStmt(expr: Function): T; 
  visitIfStmt(expr: If): T; 
  visitLetStmt(expr: Let): T; 
  visitPrintStmt(expr: Print): T; 
  visitReturnStmt(expr: Return): T; 
  visitWhileStmt(expr: While): T; 
}
export abstract class Stmt { 
  abstract accept<T>(visitor: Visitor<T>): T;
}

// 块级语句 {}
export class Block extends Stmt { 
  statements: Array<Stmt>

  constructor(statements: Array<Stmt>) {
    super()
    this.statements = statements
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitBlockStmt(this)
  }
}

// 类语句
export class Class extends Stmt { 
  name: Token
  superclass: Variable
  methods: Array<Function>

  constructor(name: Token, superclass: Variable, methods: Array<Function>) {
    super()
    this.name = name
    this.superclass = superclass
    this.methods = methods
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitClassStmt(this)
  }
}

// 表达式语句
export class Expression extends Stmt { 
  expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitExpressionStmt(this)
  }
}

// Function语句
export class Function extends Stmt { 
  name: Token
  params: Array<Token>
  body: Array<Stmt>

  constructor(name: Token, params: Array<Token>, body: Array<Stmt>) {
    super()
    this.name = name
    this.params = params
    this.body = body
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitFunctionStmt(this)
  }
}

// Control Flow - if...else
export class If extends Stmt { 
  condition: Expr
  thenBranch: Stmt
  elseBranch: Stmt

  constructor(condition: Expr, thenBranch: Stmt, elseBranch: Stmt) {
    super()
    this.condition = condition
    this.thenBranch = thenBranch
    this.elseBranch = elseBranch
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitIfStmt(this)
  }
}

// 变量声明
export class Let extends Stmt { 
  name: Token
  initializer: Expr

  constructor(name: Token, initializer: Expr) {
    super()
    this.name = name
    this.initializer = initializer
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitLetStmt(this)
  }
}

// Print语句
export class Print extends Stmt { 
  expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitPrintStmt(this)
  }
}

// 返回语句
export class Return extends Stmt { 
  keyword: Token
  value: Expr

  constructor(keyword: Token, value: Expr) {
    super()
    this.keyword = keyword
    this.value = value
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitReturnStmt(this)
  }
}

// Control Flow - while
export class While extends Stmt { 
  condition: Expr
  body: Stmt

  constructor(condition: Expr, body: Stmt) {
    super()
    this.condition = condition
    this.body = body
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitWhileStmt(this)
  }
}

