import * as fs from 'node:fs';
import * as path from 'node:path';
import Stream from 'node:stream';
const outputDir = process.argv[2];

if (!outputDir) {
	console.error('usage: node generateAST.ts <file>');
	process.exit(-1);
}
const indent = '  '; // 两个缩进

defineAst(outputDir, 'Expr', {
	Binary: 'Expr left, Token operator, Expr right',
	Grouping: 'Expr expression',
	Literal: 'object value',
	Unary: 'Token operator, Expr right',
});

function defineAst(outputDir: string, name: string, types: {}, level = 0) {
	const outputPath = path.resolve(outputDir, name + '.ts');
	const writer = fs.createWriteStream(outputPath);

	// baseClass generator
	writer.write(`/* Generated By ${path.basename(__filename)} */\n\n`);
	// 写一个token引入
	writer.write('import { Token } from "./Token";\n');

	writer.write(`export abstract class ${name} { \n`);
	writer.write(`${indent}accept (visitor) {}\n`);
	writer.write(`}\n\n`);

	// extends class generator
	const classNames = Object.keys(types);
	classNames.forEach((className) => {
		defineType(writer, name, className, types[className]);
		writer.write('\n');
	});

	writer.end();
}

function defineType(
	writer: Stream.Writable,
	parentName: string,
	typeName: string,
	fields: string
) {
	writer.write(`export class ${typeName} extends ${parentName} { \n`);

	const fieldsArray = fields.split(', ');
	const fieldList = fieldsArray.map((item) => item.split(' ')); // 获取到 [[类型, 名字], ...]
	const result = fieldList.map(([type, name]) => `${name}: ${type}`).join(', ');

	// 私有变量
	fieldList.map(([type, name]) => {
		writer.write(`${indent}${name}: ${type}\n`);
	});

	writer.write('\n');
	// 构造函数
	writer.write(`${indent}constructor(${result}) {\n`);
	writer.write(`${indent}${indent}super()\n`);
	fieldList.forEach(([_type, name]) => {
		writer.write(`${indent}${indent}this.${name} = ${name}\n`);
	});

	writer.write(`${indent}}\n\n`);

	writer.write(`${indent}accept(visitor) {\n`);
	writer.write(
		`${indent}${indent}return visitor.visit${typeName}${parentName}(this)\n`
	);
	writer.write(`${indent}}\n`);

	writer.write('}\n');
}
